
GitHub repo: commit code : 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


JENKINS:
=======
For versioning:
-----------------
mkdir -p versions
cp target/vprofile-v1.war versions/vprofile-V$BUILD_ID.war

PERAMETRAISED VERSIONINS:
-------------------------
mkdir -p versions
#cp webapp/target/webapp.war versions/webapp-V$BUILD_ID.war
cp webapp/target/webapp.war versions/webapp-V$VERSION.war


Suppose if we want to some more advanced versioning like timestamp..etc...we can use some plugins for this type of versioning
insall timestamp or zentime pluging and in job General coloumn type this vlaue yy-MM-dd-HHmm

and the last "Post Step"->Execute shell filed add this entry like the below 

Hello-World-project:
--------------------
mkdir -p versions
#cp webapp/target/webapp.war versions/webapp-V$BUILD_ID.war
#cp webapp/target/webapp.war versions/webapp-V$VERSION.war
cp webapp/target/webapp.war versions/webapp-$BUILD_TIMESTAMP.war
cp webapp/target/webapp.war versions/webapp-$BUILD_ID-$BUILD_TIMESTAMP.war

Maven-project:
--------------
mkdir -p versions
#cp target/todo-api-1.0-SNAPSHOT.war versions/todo-V$BUILD_ID.war
cp target/todo-api-1.0-SNAPSHOT.war versions/todo-V$BUILD_ID-$BUILD_TIMESTAMP.war

V-Profile project:
------------------
mkdir -p versions
#cp target/vprofile-v1.war versions/vprofile-V$BUILD_ID.war
cp target/vprofile-v1.war versions/vprofile-V$BUILD_ID-$BUILD_TIMESTAMP.war
=========================================================================================================================

Deveopes write the code and make the changes in the code and test it locally(git), 
if they are good with the chagnes, they will push it to the centralaized repository like GitHub, 
So developers will have a git tool with will integrate with GitHub repository and the code will be commited to 
GitHub repository, 
As soon as there is a code-change . Jenkins will detect the change and fetch the code by using git tool.
so jenkins will have git tool and git-plugin which will help to accomplish the tasks whenever there is a change , jenkins will 
fetch the code and build it, we will be using maven build tool because we do have JAVA code.
Once the build completes it will generate artifacts, Next we will condect UNIT test by using Maven ,
Maven will have some unit test framework that developers will use, UNIT test will be part of our source code , it will 
generate the report in xml format , 

	Once the report ready we will condect another kind of test called us code analysis , now unit test will check whether 
the unit of code works or not , But code analysis checks if the code have any vulnerability . Are you following the best 
prctices? or Do you have any bug in the code and there many other perametes the code analysis will check the code .

We will be using sonarQube scanner to scan the code also we will be using checkstyle to scan the code and it will generate 
the reports in in xml format, These report will be uploded t sonarQube server. In sonarQube server we can see and we can 
have proper graph, charts and we can see what are the bugs,vulnerabilities and many other in our code.

we can set Qualitiy Gates, if we say , if my code does not follow these practices , then fail the build And if it fails then 
the pipeline will stop , if it passes we have verified copy of Artifacts .

So we build the code we test the code and we analysis the code ....Now we can distrube the artifact and to be deployed on 
the servers.

But before we deploying it to the servers, these artifact will be versioned and will be uploaded to Nexus sona type repository.
 




Docker file explanation:
=========================

1) FROM --> First one is FROM to pull the base imaeg, Allmost all the Dockerfile starts with FROM instruction. It tells you that 
what is the base image do you require to start with your Dockerfile 

2) RUN --> To execute commands, if you have some shell commands like installing packages, Creating users, etc almost 
all the shell commands we can execute with the RUN command instruction on Dockerfile.

3) CMD  --> To provides defaults for an executing container, CMD instruction get executed at the time of docker execution 

4) ENTRYPOINT  -->  Its also similar to CMD get executed at the time of container execution , However CMD can be commands
can be overwritten but ENTRYPOINT commands are not overwritten. And CMD can be work like aguments for ENTTRYPOINT .

5) WORKDIR --> It is something like CMD command if we wish to switch our directory within the container Then we could
use workdir instruction.

6) COPY --> Copy a directory from your local(docker-host) machine to the docker container.

7) ADD --> Copy a files and folders  from your local machine (docker-host) to docker container. We can also use this 
command like wget command. 

8) EXPOSE --> Informs docker that the container listens on the specified network-porta at runtime . 

ENV --> To set the environment variables .




Create your First Dockerfile :
==============================

pull centos from dockerhub-----------------------------> FROM 
install java ------------------------------------------> RUN 
Create /opt/tomcat directory --------------------------> RUN
Change work directory /opt/tomcat----------------------> WORKDIR
Download tomcat packages-------------------------------> ADD or RUN
Extract tar.gz file------------------------------------> RUN 
Rename the tomcat directory ---------------------------> RUN 	
Tell to docket that it runs on Port 8080 --------------> EXPOSE 
Start the tomcat service ------------------------------> CMD



My First Dockerfile:
====================
FROM centos

RUN cd /etc/yum.repos.d/
RUN sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
RUN sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*

RUN yum -y install java
RUN mkdir /opt/tomcat
WORKDIR /opt/tomcat
ADD  https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.78/bin/apache-tomcat-9.0.78.tar.gz .
RUN tar -zxvf apache-tomcat-9.0.78.tar.gz
RUN mv apache-tomcat-9.0.78/* /opt/tomcat 
EXPOSE 8080
CMD ["/opt/tomcat/bin/catalina.sh", "run"]

---------------------------------------------------------------------------

FROM tomcat:latest
RUN cp -r /usr/local/tomcat/webapps.dist/*  /usr/local/tomcat/webapps 
--------------------------------------------------------------------------------


Integrare Docker with Jenkins:
==============================

1) Create dockeradmin user 
2) Install publish over ssh plugin
3) Add Docker host to jenkins "configure systems"

docker exec in GUI:
===================
cd /opt/docker;
docker build -t regappv1 . ;
docker stop registerapp;
docker rm registerapp;
docker run -d --name registerapp -p 8086:8080 regappv1  


Prepare Ansible Server:
======================
1) Setup Hostname
2) Create ansadmin user
3) Add user to sudoers file
4) Generate SSH keys 


Integrate Dockerhost with Ansible:
===============================

On DockerHost:
--------------
1) Create ansadmin user
2) Add ansadmin to sudoers file
3) Enable passwd passwd based login

On AnsibleHost:
---------------

1) Add to ansible host file
2) Copy ssh keys
3) Test the connection 


Integrate Ansible with Jenkins:
================================

Manage-jenkins --> 




Using Ansible to create containers:
===================================
After we push the artifact from jenkins to Ansible host (manually we did till now)

Now how can we make it to our target environment (docker) , That is where dockerhub comes into the picture

SO From ansible host we should push our docker images to docker hub , dockerhub can be accessible by any host 

From ou Ansible we instruct our docker host ok go ahead pull the image from dockerhub and create a container 

Our end user can be accessible from dockerhost .


Now in Ansible host we are going to create a Ansible-playbook which creates a docker image 

Below /opt/docker folder in Ansible server we have creted the regapp.yaml
====================================================
---
 - hosts: ansible
   tasks:  
     - name: Create docker image 
       command: docker build -t regapp:latest . 
       args:
         chdir: /opt/docker
======================================================

So with the help of this ansible yaml file we can create docker image once docker image has been create we need to rename 
the docker image with docker io username credentisls like the below 

Rename the image name:
======================
docker tag 1f24 vsknalli/regapp:latest

Before we push the image to DockerHub we need to login to docker hub vsknalli@gmail.com

# docker push regapp:latest

Now we pushed the image to dockerhub , the next step how we can incorporate this Ansible playbook how we can tag and commit 
the image to DockerHub and from DockerHub the docker host is going to pull this image and create the container out of it .


Using Ansible to create Containers:
===================================


