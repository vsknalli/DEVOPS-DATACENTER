###################################
DEPLOY ARTIFACT ON DOCKER-CONTAINER
##################################

For this first we need to setup Docker Host and need to install docker on that host and start docker services

How to create Docker container
=============================
To create a docker container we need docker image, with the help of docker run command we can create docker conatiner with 
some additional specifications

How do we get docker iamges:---> Docker iamge we can get it in two ways 
1) From DockerHub
2) Creating own Dockerfile 
while creating docker image from dockerfile we can use docker build command 

we search "tomcat" image and pull the image to local server # docker pull tomcat 

Now we need to create container out of it , to create a container 
# docker run -d --name tomcat-container -p 8081:8080 tomcat:latest

After we create the tomcat container if we tried to access Web-GUI --we got error , the reson is after tomcat-9 they moved
webapp directory contend to webapp.dist , so we again move back the webapp.dist contend back to webapp directory 
# docker exec -it tomcat-container /bin/bash
By default docker container login to /usr/local/tomcat directory 
Now we need to copy webapp.dist all the contend to webapp folder 
# cp webapp.dist/* webapp
# systemctl reload docker
# However we have done the changes inside the container is temporary , if we terminate the container if we recreate it it, the changes will be disapper.

################################## TO OVERCOMT THIS PROBLEM WE CAN CREATE DOCKERFILE ########################################33
# In the Dockerfile tomcat is as a base image
# Vi Dockerfile

Below are the instruction from base centos on top of it install tomcat:
======================================================================
1) Pull centos from DockerHub
2) Install Java
3) create /opt/tomcat diectory
4) Change work directry to /opt/tomcat
5) Download tomcat package 
6) Extract tar.gz file 
7) Rename the tomcat directory
8) Tell to docker it should run on 8080 port
9) Start tomcat server 
vi Dockerfile
FROM centos:latest
RUN  yum install java -y
RUN  mkdir /opt/tomcat
WORKDIR cd /opt/tomcat
RUN wget <tomcat-download-URL.tar.gx> .
RUN tar -xvzf tomcat-xx-tar.gz file 	
RUN mv tomcat-xxx  tomcat
EXPOSE 8080
CMD ["/opt/tomcat/bin/catalina.sh, "run""]

# docker build -t mytomcat . 
# docker run -d --name mytomcat-server -p 8081:8081 mytomcat




##### To Integrate Docker with Jenkins #######################################################################

 	. Create a dockeradmin user
	. Install "Publish Over SSH" Plugin 
	. Add dockerhost to Jenkins "Configure system"
-----------------------------
# useradd dockeradmin
# passwd dockeradmin
# usermod -aG dockerroot docker
# vi /etc/ssh/sshd_config 
PasswordAuthentication yes
# passwordAuthentication no
# systemctl reload sshd
-----------------------------

Go to Jenkins GUI 
ManageJenkins-Plugins-install "Publish over ssh" - install without restart

ManageJenkins-system-go to PubilshOverSSH -> add ssh server - Provide the below info
Name: docker-host
HostName: 192.168.56.24
Username: dockeradmin 
Go to Advanced and provide the password - validate the connection TestConfiguration --Apply and Save

#### Now we are going to deploy the Artifacts on Docker-Container ###############################################
Pull the code from GitHub and build with Help of Maven and copy the artifacts on the docke Host 
Once the artifact is available in docker-host then copying the artifact inside the container is easy.

Jenkins GUI instead of create a new job , copy it from Buildand deply on maven job 
in post-Build-Action remove deploy the actifact on "Deploy war/ear to container" instead we need to use 
"publish over-ssh plugin"
Name: Build and deploy on container
in post-Build-Action: if we choose this option it will show the available ssh server options , so select docker-host
----------------------------
Name: docker-host
Sourcefile: **/.war*
Remove Source: webapp/target
Remote Directory: 
Exec:
---------------------------Apply & Save and RUN

# Till now the artifact is copied form Github and build by maven in jenkins and copied to the source file to docker hosts /opt/home directory 
# Now we need to lanch a new container along with our war file , out artifact is available in docker's home directory 
# The best way is Keep the source file and Dockerfile in seprate directory , we use /opt/docker in docker host 
mkdir /opt/docker
chown dockeradmin:dockeradmin /opt/docker
From now onwards i tell the job instead copying artifactory on dockeradmin home directory copy it on /opt/docker
cp /root/Docker /opt/docker
chown dockeradmin:dockeradmin /opt/docker/Dockerfile

Now to to jenkins job --> configure -> RemoteDirectory: //opt//docker  --> should be double //

Now Run the job it will copy the artifact war  on docker hosts /opt/docker folder --validate it ...!!!

------------------------
Now our requirement is need to create container along with artifact war file , Then only we can access our application fro URL

for that we need to some modificaion in Dockerfile
-----------------------------------------------------------------
vi Dockerfile
FROM tomcat:latest
RUN cp -R /usr/local/tomcat/webapps.dist/* /usr/local/tomcat/webapps
COPY ./*.war /usr/local/tomcat/webapps 
-------------------------------------------------------------------
# docker build -t tomcat:v1 .       --> . is current directory Dockerfile available
# docker images 
# docker run -d --name regapp:v0 -p 8081:8080 tomcat:v1 
# docker ps 
Now we can access our application on port 192.168.56.24:8081/webapp 

we did id manually if we want to automatically we need to , edit the same job in jenkins -GUI 
edit -> Build deploy on docker-container job -> configure -> postbuild - Exec Command  
cd /opt/docker;
docker build -t regapp:v1 .
docker run -d --name regapp -p 8081:8081 regapp:v1 
# Notes:-----------------------------------------------------------------------
beore executing docker run delete unnessary images and container in docker host
docker image prune -a
docker conainer prune 
-----------------------------------------------------------------------------
Now we can access the application in web GUI 

# if you Rerun the same job  build is successful but while it deploying it on docker its get failed becuse alrady in the same name containe available to avaid this we need to do 
# some modifications in the same job in post-Bild: Exec column 

cd /opt/docker;
docker build -t regapp:v1 .
docker stop regapp
docker rm regapp
docker run -d --name regapp -p 8081:8081 regapp:v1

save and build it ----!!!


